import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'net.kyori.blossom' version '1.3.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'com.danifoldi'
version '1.0.0'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

repositories {
    mavenCentral()
    maven { url 'https://repo.danifoldi.com/repository/maven-releases/' }
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://nexus.velocitypowered.com/repository/maven-public/' }
    maven { url 'https://repo.viaversion.com' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'io.github.waterfallmc:waterfall-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.1.1'
    annotationProcessor 'com.velocitypowered:velocity-api:3.1.1'

    implementation 'grapefruit:grapefruit:1.5.0'
    implementation 'com.danifoldi:microbase:0.5.0'
    implementation 'com.danifoldi:DataVerse:0.4.1'

    implementation 'javax.inject:javax.inject:1'
    implementation 'com.google.dagger:dagger:2.44.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.44.2'

    compileOnly 'org.jetbrains:annotations:23.0.0'
}

task 'build-tree' {

    file('.').eachFileRecurse { f ->
        if (f.name.equalsIgnoreCase("${f.parentFile.name}Tree.java")) {
            def ver = ''
            file('src/main/resources/trees').listFiles().find {
                it.name.contains(f.parentFile.name)
            }.readLines().each {
                it.eachMatch(/version: '\d+\.\d+\.\d+'/) {
                    ver = (it =~ /\d+\.\d+\.\d+/)[0]
                }
            }

            if (ver == "") {
                throw new RuntimeException("Failed to parse version of ${f.parentFile.name}")
            }
            try {
                tasks.getByName("build-tree-${f.parentFile.name}")
                return
            } catch (ignored) {
                // ignore
            }

            task "build-tree-${f.parentFile.name}"(type: ShadowJar) {
                classifier = 'all'
                from sourceSets.main.output
                minimize()
                include "com/danifoldi/forest/tree/${f.parentFile.name}/*"
                include "trees/${f.parentFile.name}.dml"
                dependencies {
                    exclude(dependency('*:*:*'))
                }
                archiveFileName = "forest-${f.parentFile.name}-${ver}.jar"
                configurations = []
            }
            tasks.build.dependsOn("build-tree-${f.parentFile.name}")
        }
    }
}
tasks.build.dependsOn('build-tree')

processResources {
    from('src/main/resources') {
        expand(version: project.version)
        duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
}

blossom {
    replaceTokenIn('src/main/java/com/danifoldi/forest/seed/velocity/VelocityForest.java')
    replaceToken '@version@', project.version
}

build.dependsOn(shadowJar)

shadowJar {
    minimize()
    exclude 'com/danifoldi/forest/tree/*'

    archiveFileName = "forest-${project.version}.jar"
}
