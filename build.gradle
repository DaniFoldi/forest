import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.util.regex.Pattern

plugins {
    id 'java'
    id 'net.kyori.blossom' version '1.3.1'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group 'com.danifoldi'
version '1.0.0'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

compileJava {
    options.compilerArgs << '-parameters'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.danifoldi.com/repository/maven-releases/' }
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://nexus.velocitypowered.com/repository/maven-public/' }
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://repo.codemc.org/repository/maven-public' }
    maven { url 'https://jitpack.io/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://repo.viaversion.com/' }
    maven { url 'https://maven.enginehub.org/repo/' }
    maven { url 'https://ci.ender.zone/plugin/repository/everything/' }
    maven { url 'https://repo.dmulloy2.net/repository/public/' }
    maven { url 'https://mvn.exceptionflug.de/repository/exceptionflug-public/' }
}

dependencies {
    compileOnly 'io.github.waterfallmc:waterfall-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.1.1'
    annotationProcessor 'com.velocitypowered:velocity-api:3.1.1'

    compileOnly 'net.kyori:adventure-platform-bungeecord:4.3.0'

    implementation ('grapefruit:grapefruit:1.5.0') {
        exclude module: 'guava'
    }
    implementation ('hazelnut:redis:0.0.1') {
        exclude module: 'slf4j-api'
        exclude module: 'json'
        exclude module: 'gson'
    }
    implementation 'com.danifoldi:microbase:0.7.1'
    compileOnly 'com.danifoldi:DataVerse:0.7.1'
    implementation 'com.danifoldi:DML:1.0.2'

    implementation ('com.cronutils:cron-utils:9.2.1') {
        exclude module: 'slf4j-api'
    }
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.github.stefvanschie.inventoryframework:IF:0.10.9'
    compileOnly 'net.luckperms:api:5.4'
    compileOnly ('com.github.LeonMangler:PremiumVanishAPI:2.7.11-2') {
        exclude module: 'jsr305'
    }
    compileOnly 'com.comphenix.protocol:ProtocolLib:5.0.0-SNAPSHOT'
    compileOnly 'dev.simplix:protocolize-api:2.2.6'
    compileOnly ('net.milkbowl.vault:VaultAPI:1.7') {
        exclude module: 'bukkit'
    }
    compileOnly ('me.lokka30:treasury-api:1.2.1') {
        exclude module: 'annotations'
    }
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.7'
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.14'
    // compileOnly 'me.clip:placeholderapi:2.11.2'
    // compileOnly 'com.plotsquared:PlotSquared-Core:6.10.2'
    // compileOnly 'com.plotsquared:PlotSquared-Bukkit:6.10.2'
    compileOnly 'dev.espi:protectionstones:2.10.2'

    implementation 'com.google.dagger:dagger:2.45'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.45'

    compileOnly project(':collector')
    annotationProcessor project(':collector')

    compileOnly 'org.jetbrains:annotations:24.0.1'
}

task 'build-tree' {

    file('.').eachFileRecurse { f ->
        if (f.name.equalsIgnoreCase("${f.parentFile.name}Tree.java")) {

            try {
                tasks.getByName("build-tree-${f.parentFile.name}")
                return
            } catch (ignored) {
                // ignore
            }

            task "build-tree-${f.parentFile.name}"(type: ShadowJar) {
                classifier = 'all'
                from sourceSets.main.output
                minimize()
                include "com/danifoldi/forest/tree/${f.parentFile.name}/*"

                if (f.parentFile.name == 'gameprotocol') {
                    include 'protocols.dml'
                }

                include "trees/${f.parentFile.name}.dml"
                dependencies {
                    exclude(dependency('*:*:*'))
                }
                var treeVersion = f
                        .readLines()
                        .stream()
                        .map(l -> l.trim())
                        .filter(l -> Pattern.compile("@VersionCollector\\(\"\\d+\\.\\d+\\.\\d+\"\\)").matcher(l).matches())
                        .map(l -> l.substring(19, l.length() - 2))
                        .findFirst()
                        .orElse("0.0.1")
                archiveFileName = "forest-${f.parentFile.name}-${treeVersion}.jar"
                configurations = []

                relocate 'org.jetbrains.annotations', 'com.danifoldi.forest.lib.annotations'
                relocate 'javax.inject', 'com.danifoldi.forest.lib.inject'
                relocate 'dagger', 'com.danifoldi.forest.lib.dagger'
                relocate 'grapefruit.command', 'com.danifoldi.forest.lib.grapefruit'
                relocate 'hazelnut', 'com.danifoldi.forest.lib.hazelnut'
                relocate 'com.danifoldi.microbase', 'com.danifoldi.forest.lib.microbase'
                relocate 'redis.clients.jedis', 'com.danifoldi.forest.lib.redis'
                relocate 'org.apache.commons.pool2', 'com.danifoldi.forest.lib.pool2'
                relocate 'com.cronutils', 'com.danifoldi.forest.lib.cronutils'
                relocate 'com.eclipsesource.json', 'com.danifoldi.forest.lib.json'
                relocate 'com.danifoldi.dml', 'com.danifoldi.forest.lib.dml'
                relocate 'okio', 'com.danifoldi.forest.lib.okio'
                relocate 'okhttp3', 'com.danifoldi.forest.lib.okhttp3'
                relocate 'kotlin', 'com.danifoldi.forest.lib.kotlin'
            }
            tasks.build.dependsOn("build-tree-${f.parentFile.name}")
        }
    }
}
tasks.build.dependsOn('build-tree')

processResources {
    from('src/main/resources') {
        expand(version: project.version)
        duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
}

blossom {
    replaceTokenIn('src/main/java/com/danifoldi/forest/seed/velocity/VelocityForest.java')
    replaceToken '@version@', project.version
}

build.dependsOn(shadowJar)

shadowJar {
    minimize()
    exclude 'com/danifoldi/forest/tree/*'
    exclude 'trees/*.dml'
    exclude 'protocols.dml'

    relocate 'org.jetbrains.annotations', 'com.danifoldi.forest.lib.annotations'
    relocate 'javax.inject', 'com.danifoldi.forest.lib.inject'
    relocate 'dagger', 'com.danifoldi.forest.lib.dagger'
    relocate 'grapefruit.command', 'com.danifoldi.forest.lib.grapefruit'
    relocate 'hazelnut', 'com.danifoldi.forest.lib.hazelnut'
    relocate 'com.danifoldi.microbase', 'com.danifoldi.forest.lib.microbase'
    relocate 'redis.clients.jedis', 'com.danifoldi.forest.lib.redis'
    relocate 'org.apache.commons.pool2', 'com.danifoldi.forest.lib.pool2'
    relocate 'com.cronutils', 'com.danifoldi.forest.lib.cronutils'
    relocate 'com.eclipsesource.json', 'com.danifoldi.forest.lib.json'
    relocate 'com.danifoldi.dml', 'com.danifoldi.forest.lib.dml'
    relocate 'okio', 'com.danifoldi.forest.lib.okio'
    relocate 'okhttp3', 'com.danifoldi.forest.lib.okhttp3'
    relocate 'kotlin', 'com.danifoldi.forest.lib.kotlin'

    archiveFileName = "forest-${project.version}.jar"
}
